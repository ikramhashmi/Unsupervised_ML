# -*- coding: utf-8 -*-
"""Mall Customer Segmentation .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fcSEAC0DxoDYSThfP5zODwbgFwgtCcco
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("vjchoudhary7/customer-segmentation-tutorial-in-python")

print("Path to dataset files:", path)

!cp -r  /root/.cache/kagglehub/datasets/vjchoudhary7/customer-segmentation-tutorial-in-python/versions/1 .

import pandas as pd

df=pd.read_csv("/content/1/Mall_Customers.csv")

df.head()

df.drop(["CustomerID"],axis=1,inplace=True)

df.shape

df.isna().sum()

df.duplicated().sum()

x=df.iloc[:,[2,3]].values

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
x_scaled = scaler.fit_transform(x)

x.shape

!pip install kneed

from kneed import KneeLocator
from sklearn.cluster import KMeans

wcss=[]
for i in range(1,10):
  kmeans=KMeans(n_clusters=i,init='k-means++',random_state=42)
  kmeans.fit(x_scaled)
  wcss.append(kmeans.inertia_)

knee_locator = KneeLocator(range(1, 10), wcss, curve='convex', direction='decreasing')
optimal_k = knee_locator.elbow

print(f"Optimal number of clusters (Elbow Method): {optimal_k}")

silhouette_scores=[]
from sklearn.metrics import silhouette_score
for i in range(2,10):
  kmeans=KMeans(n_clusters=4,init='k-means++',random_state=42)
  y=kmeans.fit_predict(x_scaled)
  score = silhouette_score(x_scaled, kmeans.labels_)
  silhouette_scores.append(score)

plt.figure(figsize=(8, 5))
plt.plot(range(2, 10), silhouette_scores, marker="o", linestyle="--")
plt.xlabel("Number of Clusters")
plt.ylabel("Silhouette Score")
plt.title("Silhouette Score for Optimal Clusters")
plt.show()

kmeans = KMeans(n_clusters=optimal_k, init='k-means++', random_state=42)
y = kmeans.fit_predict(x)

plt.figure(figsize=(8,6))
sns.scatterplot(x=x[:, 0], y=x[:, 1], hue=y, palette="viridis", s=100, edgecolor='black')


centroids = kmeans.cluster_centers_
plt.scatter(centroids[:, 0], centroids[:, 1], marker='X', s=200, c='red', label='Centroids')

plt.xlabel("Annual Income")
plt.ylabel("Spending Score")
plt.title("K-Means Clustering Visualization")
plt.legend()
plt.show()

import scipy.cluster.hierarchy as sc
plt.figure(figsize=(10, 7))
dendrogram = sc.dendrogram(sc.linkage(x_scaled, method='ward'))
plt.title('Dendrogram')
plt.xlabel('Customers')
plt.ylabel('Euclidean distances')
plt.show()

from sklearn.cluster import AgglomerativeClustering
cluster=AgglomerativeClustering(n_clusters=optimal_k,linkage='ward')
cluster.fit(x_scaled)

cluster.labels_

plt.scatter(x_scaled[:,0],x_scaled[:,1],c=cluster.labels_)

from sklearn.cluster import DBSCAN
dbscan=DBSCAN(eps=0.5,min_samples=5)
dbscan.fit(x_scaled)

dbscan.labels_

plt.scatter(x_scaled[:,0],x_scaled[:,1],c=dbscan.labels_)